local lp = game.Players.LocalPlayer



local commands = {
	name = {};
	howtouse = {};
	code = {};
	cmdview = {};
}

function addcmd(command, explain)
	if explain == "" or explain == nil then
		explain = "none"
	end
	commands.name[#commands.name+1] = tostring(command):lower()
	commands.howtouse[#commands.howtouse+1] = tostring(explain):lower()
	commands.cmdview[#commands.cmdview+1] = command..": ".. explain
end

function pause()
	game:GetService("RunService").Stepped:Wait()
end


function notify(time, message)
	game.StarterGui:SetCore("SendNotification", {
		Title = "Notification"; -- the title (ofc)
		Text = message; -- what the text says (ofc)
		Icon = "rbxassetid://4946089592"; -- the image if u want. 
		Duration = time;
	})
end

function notifyerror(time, message)
	game.StarterGui:SetCore("SendNotification", {
		Title = "Command Error"; -- the title (ofc)
		Text = message; -- what the text says (ofc)
		Icon = "rbxassetid://4946089592"; -- the image if u want. 
		Duration = time;
	})
end

function sub(text, numberofletters)
	if text:sub(numberofletters+1, numberofletters+1) == " " or text:sub(numberofletters+1, numberofletters+1) == "" then
		return text:sub(0,tonumber(numberofletters))
	else
		return ""
	end
end

function tablefind(table, string)
	for i,v in pairs(table) do
		if v == string then
			return i
		end
	end
end

function split(text, splitter)
	text = text..splitter
	local returning = {}
	local returningtxt = ""
	for i = 1,#text do
		if text:sub(i,i) ~= splitter then
			returningtxt = returningtxt..text:sub(i,i)
		else
			returning[#returning+1] = returningtxt
			returningtxt = ""
		end
	end
	return returning
end

function getplayer(plr)
	plr = plr:lower()
	if game.Players:FindFirstChild(plr) then
		return game.Players:FindFirstChild(plr)
	elseif plr:lower() == "random" then
		return game.Players:GetPlayers()[math.random(1,#game.Players:GetPlayers())]
		
	else
		for i,v in pairs(game.Players:GetPlayers()) do
			if v.Name:lower():match(plr) then
				return(v)
			end
		end
	end
end

local maxflyspeed = 2*2
local flyspeed = maxflyspeed/2
local flying = false

function fly()
	if flying == false then
		spawn(function()
			notify(2,"You should be flying")
			flying = true
			local x = 0
			local y = 0
			local z = 0
			local keys = {}
			local focusedcheck = ""
			local status = "none"
			game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
			local uis = game:GetService("UserInputService")
			local velocity = Instance.new("BodyVelocity",game.Players.LocalPlayer.Character.HumanoidRootPart)
			velocity.MaxForce = Vector3.new('inf','inf','inf')
			local gyro = Instance.new("BodyGyro",game.Players.LocalPlayer.Character.HumanoidRootPart)
			gyro.MaxTorque = Vector3.new('inf','inf','inf')
			gyro.D = 300
			gyro.P = 9000
			local focuschecc = uis.TextBoxFocused:Connect(function(thing)
				focusedcheck = thing.Name
				uis.TextBoxFocusReleased:Wait()
				focusedcheck = ""
			end)
			velocity.Velocity = Vector3.new(0,0,0)
			local fli = uis.InputBegan:Connect(function(key)
				if not tablefind(keys,uis:GetStringForKeyCode(key.KeyCode)) then
					keys[#keys+1] = uis:GetStringForKeyCode(key.KeyCode)
				end
				if key.KeyCode == Enum.KeyCode.W and focusedcheck == "" then
					while key.UserInputState ~=Enum.UserInputState.End and flying == true  do
						gyro.CFrame = game.Workspace.Camera.CFrame
						local direction = game.Players.LocalPlayer.Character.Humanoid.MoveDirection * 16
						local cameray = game.Workspace.Camera.CFrame.LookVector.Y*16
						if tablefind(keys,"S") or tablefind(keys,"Q") or tablefind(keys,'E') then
							if tablefind(keys,"Q") then
								cameray = -16
							elseif tablefind(keys,"E") then
								cameray = 16
							else
								velocity.Velocity = Vector3.new(0,0,0)
								repeat pause() until not tablefind(keys,"S") and not tablefind(keys,"Q") and not tablefind(keys,'E')
							end
						end
						direction = Vector3.new(direction.X,cameray,direction.Z)
						velocity.Velocity = direction * flyspeed
						pause()
					end
					velocity.Velocity = Vector3.new(0,0,0)
				end

				if key.KeyCode == Enum.KeyCode.S and focusedcheck == "" then
					while key.UserInputState ~=Enum.UserInputState.End and flying == true  do
						gyro.CFrame = game.Workspace.Camera.CFrame
						local direction = game.Players.LocalPlayer.Character.Humanoid.MoveDirection * 16
						local cameray = -(game.Workspace.Camera.CFrame.LookVector.Y*16)
						if tablefind(keys,"W") or tablefind(keys,"Q") or tablefind(keys,'E') then
							if tablefind(keys,"Q") then
								cameray = -16
							elseif tablefind(keys,"E") then
								cameray = 16
							else
								velocity.Velocity = Vector3.new(0,0,0)
								repeat pause() until not tablefind(keys,"W") and not tablefind(keys,"Q") and not tablefind(keys,'E')

							end
						end
						direction = Vector3.new(direction.X,cameray,direction.Z)
						velocity.Velocity = direction * flyspeed
						pause()
					end
					velocity.Velocity = Vector3.new(0,0,0)
				end
				if key.KeyCode == Enum.KeyCode.A and focusedcheck == "" or key.KeyCode == Enum.KeyCode.D and focusedcheck == "" then
					local progress = 0
					while key.UserInputState ~=Enum.UserInputState.End and flying == true  do
						gyro.CFrame = game.Workspace.Camera.CFrame
						local direction = game.Players.LocalPlayer.Character.Humanoid.MoveDirection * 16
						local cameray = velocity.Velocity.Y
						direction = Vector3.new(direction.X*flyspeed,cameray,direction.Z*flyspeed)
						velocity.Velocity = direction
						pause()
					end
					velocity.Velocity = Vector3.new(0,0,0)
				end
				if key.KeyCode == Enum.KeyCode.E and  focusedcheck == ""  then
					while key.UserInputState ~=Enum.UserInputState.End and flying == true  do
						gyro.CFrame = game.Workspace.Camera.CFrame
						local direction = game.Players.LocalPlayer.Character.Humanoid.MoveDirection * 0
						local cameray = 16
						if tablefind(keys,'Q') then
							cameray = 0
						end
						direction = Vector3.new(direction.X,cameray,direction.Z)
						velocity.Velocity = direction * flyspeed
						pause()
					end
					velocity.Velocity = Vector3.new(0,0,0)
				end
				if key.KeyCode == Enum.KeyCode.Q and  focusedcheck == ""  then
					while key.UserInputState ~=Enum.UserInputState.End and flying == true  do
						gyro.CFrame = game.Workspace.Camera.CFrame
						local direction = game.Players.LocalPlayer.Character.Humanoid.MoveDirection * 0
						local cameray = -16
						if tablefind(keys,'E') then
							cameray = 0
						end
						direction = Vector3.new(direction.X,cameray,direction.Z)
						velocity.Velocity = direction * flyspeed
						pause()
					end
					velocity.Velocity = Vector3.new(0,0,0)
				end

				if key.KeyCode == Enum.KeyCode.Space and focusedcheck == "" then
					game.Players.LocalPlayer.Character.Humanoid.Sit = false
				end

				if key.KeyCode == Enum.KeyCode.LeftShift and focusedcheck == "" then
					flyspeed = maxflyspeed
					repeat pause() until key.UserInputState == Enum.UserInputState.End
					flyspeed = maxflyspeed /2
				end
			end)

			local qwe = uis.InputEnded:Connect(function(key)
				if tablefind(keys,uis:GetStringForKeyCode(key.KeyCode)) then
					local number = tablefind(keys,uis:GetStringForKeyCode(key.KeyCode))
					table.remove(keys,number)
				end
			end)

			while flying == true and game.Players.LocalPlayer.Character.Humanoid.Health > 0 do
				gyro.CFrame = game.Workspace.Camera.CFrame
				pause()
			end
			notify(2,"Flying turned off")
			fli:Disconnect()
			qwe:Disconnect()
			focuschecc:Disconnect()
			velocity:Destroy()
			gyro:Destroy()
			game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
			flying = false
		end)
	else
		flying = false

	end
end

function unfly()
	flying = false
end

function setspeedfly(int)
	maxflyspeed = int*2
	flyspeed = maxflyspeed / 2
	notify(5,"Set flyspeed to ".. int)
end

noclipping = false

function noclip()
	if noclipping == false then
		noclipping = true
		spawn(function()
			local clipi = game:GetService("RunService").Stepped:Connect(function()
				for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
					if v:IsA("BasePart") and v.CanCollide == true then
						v.CanCollide = false
					end
				end
			end)
			notify(5, "Noclip is enabled")
			repeat pause() until noclipping == false or game.Players.LocalPlayer.Character.Humanoid.Health <= 0
			noclipping = false
			clip()
			clipi:Disconnect()
		end)
	end
end

function clip()
	if noclipping == true then
	noclipping = false
	for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
		if v:IsA("BasePart") and not v.Name:match("Hand") and not v.Name:match("Foot") and not v.Name:match("Leg") then
			v.CanCollide = true
		end
	end
		notify(5, "Noclip is disabled")
	end
end






-- Instances:

local HarambeAdmin = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local adminthing = Instance.new("TextBox")

--Properties:

HarambeAdmin.Name = "HarambeAdmin"
if game:GetService("RunService"):IsStudio() then
	HarambeAdmin.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
else
	HarambeAdmin.Parent = game.CoreGui
end

Frame.Parent = HarambeAdmin
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
Frame.Position = UDim2.new(0.435876518, 0, 0.480089098, 0)
Frame.Size = UDim2.new(0.110638298, 10, 0.0450450443, 0)
Frame.BackgroundTransparency = 0.2


adminthing.Name = "adminthing"
adminthing.Parent = Frame
adminthing.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
adminthing.BorderColor3 = Color3.fromRGB(255, 255, 255)
adminthing.Position = UDim2.new(0, 0, 0.285714298, 0)
adminthing.Size = UDim2.new(1, 0, 0.713999987, 0)
adminthing.ClearTextOnFocus = false
adminthing.Font = Enum.Font.Arial
adminthing.PlaceholderColor3 = Color3.fromRGB(130, 130, 130)
adminthing.PlaceholderText = "Harambe"
adminthing.Text = ""
adminthing.TextColor3 = Color3.fromRGB(80, 255, 229)
adminthing.TextScaled = true
adminthing.TextSize = 14.000
adminthing.TextWrapped = true
adminthing.BackgroundTransparency = 0.2

local uis = game:GetService("UserInputService")
local focused = false

function focus()
	Frame.BackgroundColor3 = Color3.fromRGB(0,0,0)
	Frame.BackgroundTransparency = 0.2
	adminthing.BackgroundTransparency = 0.2
	adminthing:CaptureFocus()
	adminthing.TextTransparency = 0
end

function unfocus()
	adminthing:ReleaseFocus()
	Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
	Frame.BackgroundTransparency = 0.95
	adminthing.BackgroundTransparency = 0.6
	adminthing.TextTransparency = 0.6
end
unfocus()

uis.TextBoxFocused:Connect(function(thing)
	focused = true
end)

uis.TextBoxFocusReleased:Connect(function()
	focused = false
end)

uis.InputBegan:Connect(function(key)
	if key.KeyCode == Enum.KeyCode.Semicolon and focused == false then
		pause()
		focus()
	end
end)

adminthing.FocusLost:Connect(function(enterpressed)
	unfocus()
	if enterpressed then
		runcmd(adminthing.Text)
	end
end)
-------------------------------------------------------------------------------------------
addcmd("fly", "")--D
addcmd("unfly", "")--D
addcmd("flyspeed", "number")--D
addcmd("cmds", "")--D
addcmd("noclip","")--D
addcmd("clip","")--D
addcmd("goto","player")
addcmd("bang", ", number (optional)")
addcmd("kill", "player")

function runcmd(command)
	local args = split(command, " ")
	local cmd = args[1]
	if cmd == "fly" then
		fly()
	elseif cmd == "unfly" then
		unfly()
	elseif cmd == "flyspeed" then
		local number = tonumber(cmd:sub(10))
		setspeedfly(number)
	elseif cmd == "noclip" then
		noclip()
	elseif cmd == "clip" then
		clip()
	elseif cmd == "cmds" then
		notify(5, "Type /console in chat or open the developer console to view the commands")
		local printie = "\n"
		for i,v in pairs(commands.cmdview) do
			printie = printie.. v.. "\n"
		end
		print(printie)
	elseif cmd == "goto" then
		local target = getplayer(args[2])
		if target then
			local targetroot = target.Character:FindFirstChild("HumanoidRootPart") or target.Character:FindFirstChild("Torso") or target.Character:FindFirstChild("UpperTorso") or target.Character:FindFirstChild("Head")
			if targetroot then
				lp.Character.HumanoidRootPart.CFrame = targetroot.CFrame
			end
		else
			notifyerror(5,"Player isn't in the game.")
		end
	end ----------- END OF COMMANDS
end





















































local UIS = game:GetService("UserInputService")
function dragify(Frame)
	dragToggle = nil
	dragSpeed = 1
	dragInput = nil
	dragStart = nil
	dragPos = nil
	function updateInput(input)
		Delta = input.Position - dragStart
		Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
		game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.25), {Position = Position}):Play()
	end
	Frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			if UIS:GetFocusedTextBox() == nil then
				dragToggle = true
				dragStart = input.Position
				startPos = Frame.Position
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragToggle = false
					end
				end)
			end
		end
	end)
	Frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input == dragInput and dragToggle then
			updateInput(input)
		end
	end)
end
dragify(Frame)
